//Insert in a BST
public TreeNode insertIntoBST(TreeNode root, int val) {
    if(root==null) return new TreeNode(val);
    if(val<root.val){
        root.left=insertIntoBST(root.left,val);
    }
        else{
            root.right=insertIntoBST(root.right,val);
        } 
        return root;
    }

//Search in a BST
public TreeNode searchBST(TreeNode root, int val) {
        while(root!=null && root.val!=val) {
    if(val>root.val) root=root.right;
        else  root=root.left;
        }
    return root;
    }

// Deletion in BST
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
    if(root==null) return null;
     if(root.val>key) root.left= deleteNode(root.left,key);
        else if(root.val<key) root.right= deleteNode(root.right,key);
        else{
      if(root.right==null) return root.left;
        else if(root.left==null) return root.right;
            else{
             TreeNode s=succ(root);
             root.val=s.val;
                root.right=deleteNode(root.right, s.val);
            }
        }
         return root;
    }
    public TreeNode succ(TreeNode root){
        TreeNode curr=root.right;
        while(curr!=null && curr.left!=null){
            curr=curr.left;
        }
        return curr;
    }
}
// Check for BST
class Solution {
    long prev = Long.MIN_VALUE;
    public boolean isValidBST(TreeNode root) {
    if(root==null) return true;
    if(isValidBST(root.left)==false) return false;
    if(root.val<=prev) return false;
        prev=root.val;
    return isValidBST(root.right);
    }
}

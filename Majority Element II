class Solution {
    public List<Integer> majorityElement(int[] nums) {
   int n=nums.length;
   int c1=0,c2=0,e1=0,e2=0;
    for(int i=0;i<n;i++){
    if(c1==0 && (nums[i]!=e2)){
        e1=nums[i];
        c1=1;
    }
    else if(c2==0 && (nums[i]!=e1)){
        e2=nums[i];
        c2=1;
    }
    else if(e1 ==nums[i]){
        c1++;
    }
     else if(e2 ==nums[i]){
        c2++;
    }
        else{
            c1--;
            c2--;
        }
    }
    List<Integer> res=new ArrayList<>();
        int th=n/3;
    c1=0;
    c2=0;
    for(int i=0;i<n;i++){
        if(e1==nums[i]) c1++;
        else if(e2==nums[i]) c2++; 
    }
     if(c1>th)res.add(e1);
    if(c2>th) res.add(e2);
        return res;
    }
}
/////////////////////////////////////////////////
class Solution {
    public List<Integer> majorityElement(int[] nums) {
        HashMap<Integer,Integer> h=new HashMap<>();
        List<Integer> res= new ArrayList<>();

   int n=nums.length;
    for(int i=0;i<n;i++){
    h.put(nums[i],h.getOrDefault(nums[i],0)+1);
    }
     for (Map.Entry<Integer, Integer> e: h.entrySet()) {
          if(e.getValue() >n/3) {
              res.add(e.getKey());
    }
}
        return res;
}
}

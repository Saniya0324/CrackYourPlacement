class MyQueue {
    Stack<Integer> s1;
    Stack<Integer> s2;
    public MyQueue() {
    s1=new Stack<>();
    s2=new Stack<>();    
    }
    
    public void push(int x) {
    while(!s1.isEmpty()){
     s2.push(s1.pop());   
    }    
    s1.push(x);
    while(!s2.isEmpty()){
     s1.push(s2.pop());   
    }  
    }
    
    public int pop() {
    return s1.pop();    
    }
    
    public int peek() {
    return s1.peek();    
    }
    
    public boolean empty() {
    return s1.isEmpty();    
    }
}
////////////////////////////////
class MyQueue {
Stack<Integer> s1;
Stack<Integer> s2;
    public MyQueue() {
    s1=new Stack<>();
    s2=new Stack<>();
    }  
    public void push(int x) {
    s1.push(x);
    }
    
    public int pop() {
     while(!s1.isEmpty()){
    s2.push(s1.pop());
    } 
    int ans=s2.pop();
    while(!s2.isEmpty()){
    s1.push(s2.pop());
    }
        return ans;    
    }
    
    public int peek() {
  while(!s1.isEmpty()){
    s2.push(s1.pop());
    } 
    int ans=s2.peek();
    while(!s2.isEmpty()){
    s1.push(s2.pop());
    }
        return ans;   
    }
    
    public boolean empty() {
    return s1.isEmpty();    
    }
}
